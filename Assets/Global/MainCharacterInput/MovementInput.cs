//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Global/MainCharacterInput/MainCharacterControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @MovementInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @MovementInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""MainCharacterControls"",
    ""maps"": [
        {
            ""name"": ""MainCharacterInput"",
            ""id"": ""951ea055-5352-4290-b6cb-5168f6631e02"",
            ""actions"": [
                {
                    ""name"": ""Walk"",
                    ""type"": ""Value"",
                    ""id"": ""83b023b1-6e8e-4786-b1e2-b139ba8cc80a"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": ""NormalizeVector2"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""067367b8-9d85-4322-b4ff-1e203a95c210"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""798a719f-a66e-4f2e-ae53-a2c359e548dd"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Keyboard"",
                    ""id"": ""de7574d9-ff80-4eb9-9d1d-dda6ef78f365"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""ec9162ee-141f-4558-b30d-210bff36215d"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""0ed3d81d-e5fa-4540-8166-7bc1d0842022"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""a4752289-5d47-4996-9ce4-171d5dda7f38"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""5d39f7f1-0efd-4621-b037-f37aab361d82"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // MainCharacterInput
        m_MainCharacterInput = asset.FindActionMap("MainCharacterInput", throwIfNotFound: true);
        m_MainCharacterInput_Walk = m_MainCharacterInput.FindAction("Walk", throwIfNotFound: true);
        m_MainCharacterInput_Jump = m_MainCharacterInput.FindAction("Jump", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MainCharacterInput
    private readonly InputActionMap m_MainCharacterInput;
    private IMainCharacterInputActions m_MainCharacterInputActionsCallbackInterface;
    private readonly InputAction m_MainCharacterInput_Walk;
    private readonly InputAction m_MainCharacterInput_Jump;
    public struct MainCharacterInputActions
    {
        private @MovementInput m_Wrapper;
        public MainCharacterInputActions(@MovementInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Walk => m_Wrapper.m_MainCharacterInput_Walk;
        public InputAction @Jump => m_Wrapper.m_MainCharacterInput_Jump;
        public InputActionMap Get() { return m_Wrapper.m_MainCharacterInput; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MainCharacterInputActions set) { return set.Get(); }
        public void SetCallbacks(IMainCharacterInputActions instance)
        {
            if (m_Wrapper.m_MainCharacterInputActionsCallbackInterface != null)
            {
                @Walk.started -= m_Wrapper.m_MainCharacterInputActionsCallbackInterface.OnWalk;
                @Walk.performed -= m_Wrapper.m_MainCharacterInputActionsCallbackInterface.OnWalk;
                @Walk.canceled -= m_Wrapper.m_MainCharacterInputActionsCallbackInterface.OnWalk;
                @Jump.started -= m_Wrapper.m_MainCharacterInputActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_MainCharacterInputActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_MainCharacterInputActionsCallbackInterface.OnJump;
            }
            m_Wrapper.m_MainCharacterInputActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Walk.started += instance.OnWalk;
                @Walk.performed += instance.OnWalk;
                @Walk.canceled += instance.OnWalk;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
            }
        }
    }
    public MainCharacterInputActions @MainCharacterInput => new MainCharacterInputActions(this);
    public interface IMainCharacterInputActions
    {
        void OnWalk(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
    }
}
